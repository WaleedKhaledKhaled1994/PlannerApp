@page "/auth/register"
@layout AuthLayout
@using PlannerApp.Shared.Models

@inject AuthenticationService authService 
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-12">
        <h2>Create New User Account</h2>
        <EditForm Model="model"
                  OnValidSubmit="RegisterUser">
            <RadzenCard>
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="alert alert-danger">
                        hello
                        @message
                    </div>
                }
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>First Name</label>
                <RadzenTextBox @bind-Value="model.FirstName"></RadzenTextBox>
                <label>Last Name</label>
                <RadzenTextBox @bind-Value="model.LastName"></RadzenTextBox>
                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>
                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>
                <label>Confirm Password</label>
                <RadzenPassword @bind-Value="model.ConfirmPassword"></RadzenPassword>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Primary"
                              class="btn-block mr-2"
                              Disabled="isBusy"/>
                <RadzenButton ButtonType="Radzen.ButtonType.Button"
                              Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Secondary"
                              class="btn-block mr-2"
                              Disabled="isBusy"/>
            </RadzenCard>
            
        </EditForm>
    </div>
</div>

@code {
    RegisterRequest model = new RegisterRequest();
    string message = string.Empty;
    bool isBusy = false;

    public async Task RegisterUser()
    {
        Console.WriteLine("Before the condition");
        isBusy = true;
        var result = await authService.RegisterUserAsync(model);
        Console.WriteLine("Before the condition2");

        if (result.IsSuccess)
        {
            Console.WriteLine("yes the condition");

            message = result.Message;
            Console.WriteLine("yes the condition");

        }
        else
        {
            Console.WriteLine("no the condition");

            message = result.Message;
            Console.WriteLine("no the condition");


        }
        isBusy = false;
        Console.WriteLine("after the condition");

    }
}
